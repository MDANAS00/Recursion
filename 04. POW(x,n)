Link - https://leetcode.com/problems/powx-n/
Time Complexity - O(log2 N)
Space Complexity - O(log2 N)

class Solution {
    public double myPow(double x, int n) {
        if(n<0) return 1.0/power(x,-n);
        return power(x,n);
    }

    static double power(double x,int n) {
        if(n==0) return 1;
        System.out.println(n);
        double smallans = power(x,n/2);
        double bigans = smallans * smallans;
        if(n%2 != 0) return bigans*x;
        return bigans;
        
    }
}